/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUBCLIENT_H_
#define JSONRPC_CPP_STUB_STUBCLIENT_H_

#include <jsonrpccpp/client.h>

class StubClient : public jsonrpc::Client
{
    public:
        StubClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value getblockchaininfo() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getblockchaininfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getblock(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("getblock",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value sendrawtransaction(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("sendrawtransaction",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value signrawtransaction(const std::string& param01, const Json::Value& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("signrawtransaction",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value decoderawtransaction(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("decoderawtransaction",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getinfo() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getinfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value get_notarization_data() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("get_notarization_data",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value validateaddress(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("validateaddress",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string getbestblockhash() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getbestblockhash",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        std::string getblockhash(int param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("getblockhash",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value calc_MoM(const std::string& param01, const std::string& param02) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            Json::Value result = this->CallMethod("calc_MoM",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value listunspent(int param01, int param02, const Json::Value& param03) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            p.append(param03);
            Json::Value result = this->CallMethod("listunspent",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        void notifyServer() 
        {
            Json::Value p;
            p = Json::nullValue;
            this->CallNotification("notifyServer",p);
        }
};

#endif //JSONRPC_CPP_STUB_STUBCLIENT_H_
